/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 chip.glb --transform --instanceall 
Files: chip.glb [104.22KB] > chip-transformed.glb [17.55KB] (83%)
*/

import * as THREE from 'three'
import React, { useRef, useMemo, useContext, createContext } from 'react'
import { useGLTF, Merged } from '@react-three/drei'
import { useFrame, useThree } from "@react-three/fiber"

const context = createContext()
export function Instances({ children, ...props }) {
  const { nodes } = useGLTF('/chip-transformed.glb')
  const instances = useMemo(
    () => ({
      Chip: nodes.chip_1,
      Chip1: nodes.chip_2,
    }),
    [nodes]
  )
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => <context.Provider value={instances} children={children} />}
    </Merged>
  )
}

export function Chip(props) {
  const instances = useContext(context)

  const ref = useRef()
  const { viewport, camera } = useThree()
  const { width, height } = viewport.getCurrentViewport(camera, [0, 0, props.z])

  const data = {
    x: THREE.MathUtils.randFloatSpread(2),
    y: THREE.MathUtils.randFloatSpread(height),
    rX: Math.random() * Math.PI,
    rY: Math.random() * Math.PI,
    rZ: Math.random() * Math.PI,
  }


  useFrame((state) => {
    ref.current.rotation.set((data.rX += 0.002), (data.rY += 0.004), (data.rZ += 0.005))
    ref.current.position.set(width * data.x, (data.y -= 0.02), props.z)

    if (data.y < -height) data.y = height / 1.5

  }, [])

  return (
    <group ref={ref} {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <instances.Chip />
        <instances.Chip1 />
      </group>
    </group>
  )
}

useGLTF.preload('/chip-transformed.glb')
